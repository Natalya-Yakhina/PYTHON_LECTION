# Ускоренная обработка данных:
# lambda, filter, map, zip, enumerate, List Comprehension


#==========================  Анонимные, lambda функции  ===========================================

#==================================================================================================
# def f(x):
#     return x**2

# g = f # сохраняем в g всю функцию целиком (в итоге есть переменная которая хранит в себе функцию)

# print(type(f))
# print(type(g))
#==================================================================================================
# def calc1(x):
#     return x+10

# # print(calc1(10))

# def calc2(x):
#     return x*10
# # print(calc2(10))

# def math(op, x): # функция приняла операцию
#     print(op(x))

# math(calc2, 10)
# math(calc1, 10)
#==================================================================================================

# # def sum(x,y):
# #     return x+y

# # sum = lambda x, y: x + y 


# def mul(x,y):
#     return x*y

# def calc(op, a, b):
#     print(op(a, b))
#     # return op(a, b)

# calc(lambda x, y: x + y, 4, 5)
#==================================================================================================

#========================== List Comprehension  ===================================================
# позволяет упростить логику, создание списков и обрабатываеь данные

# [exp for item in iterable]
# [exp for item in iterable (if conditional)]
# [exp <if conditional> for item in iterable (if conditional)]

# получим четные элементы из диапозона
# list = []
# for i in range(1,101):
#     # if(i%2==0):
#         list.append(i)
# print(list)
# === это тоже самое что сверху ===
# list = [(i, i) for i in range(1, 21) if i % 2 == 0] # (i,i) значения кортежа
# print(list)

# === если от функции ===
# def f(x):
#     return x**3

# list = [(i, f(i)) for i in range(1, 21) if i % 2 == 0]
# print(list)

#==================================================================================================

# К чему это всё?
# В файле хранятся числа, нужно выбрать четные и составить список пар (число; квадрат числа).
# Пример:
# 1 2 3 5 8 15 23 38
# Получить:
# [(2, 4), (8, 64), (38, 1444)]

#==================================================================================================
# f = open('f.txt', 'r') # открываю список
# data = f.read() + ' '
# f.close()

# numbers = [] # создаю список
# while data != '': # пока моя строка не пустая
#     space_pos = data.index(' ') # найти от первого символа
#     numbers.append(int(data[:space_pos])) # до позиции пробела
#     data = data[space_pos+1:]

# out = [] # новый список
# for e in numbers: # пробежаться по тому списку
#     if not e % 2: #  проверить на четность
#             out.append((e,e **2))
# print(out)
#==================================================================================================

# def select(f, col):
#     return[f(x) for x in col]

# def where(f, col):
#     return[x for x in col if(x)]

# data = '1 2 3 5 8 15 23 38'.split() # набор строк

# res = select(int, data)
# res = where(lambda x: not x % 2, res) # вывд только нечетных чисел
# res = select(lambda x:(x, x**2), res)
# print(res)
#==================================================================================================

#==============================        Функция map       ==========================================

# Функция map() применяет указанную функцию к каждому элементу итерируемого объекта 
# и возвращает итератор с новыми объектами.

# f(x) ⇒ x + 10
# map(f, [ 1, 2, 3, 4, 5])
#          ↓  ↓  ↓  ↓  ↓
#        [11,12,13,14,15]
# Нельзя пройтись дважды

#==================================================================================================
# li = [x for x in range(1, 20)]
# li = list(map(lambda x:x + 10, li))
# print(li)
#==================================================================================================

# data = list(map(int,'1 2 3 4 555 6'.split())) # list - добавляет итератор и позволяет пройтись еще раз

# for e in data:
#     print(e*10)
# print('--------------------------------')
# for e in data:
#     print(e*10)
#==================================================================================================
# def select(f, col):
#     return[f(x) for x in col]

# def where(f, col):
#     return[x for x in col if(x)]

# data = '1 2 3 5 8 15 23 38'.split() # набор строк

# res = map(int, data)
# res = filter(lambda x: not x % 2, res) # вывд только нечетных чисел
# res = list(map(lambda x:(x, x**2), res))
# print(res)
# ==================================================================================================

#==============================        Функция filter       ==========================================

# Функция filter() применяет указанную функцию к каждому элементу итерируемого объекта и
# возвращает итератор с теми объектами, для которых функция вернула True.

# f(x) ⇒ x - чётное
# filter(f, [ 1, 2, 3, 4,5])
#                     ↓
#                [ 2, 4 ]
# Нельзя пройтись дважды
# ==================================================================================================
# data = [x for x in range(10)]

# result = list(filter(lambda x: x % 2, data))
# print(result)
# ==================================================================================================

#==============================        Функция ZIP       ==========================================

# Функция zip() применяется к набору итерируемых объектов 
# и возвращает итератор с кортежами из элементов входных данных.
# Количество элементов в результате равно минимальному количеству элементов входного набора
# zip ([1, 2, 3], [ ‘о‘, ‘д‘, ‘т‘], [‘f’,’s’,’t’])
#                        ↓
# [(1, 'о', 'f'), (2, 'д', 's'), (3, 'т', 't')]
# Нельзя пройтись дважды

# ** позволяет получать новый набор данных на основе некоторых имеющихся наборов
# ==================================================================================================
# users = ['user1', 'user2', 'user3', 'user4', 'user5']
# ids = [4, 5, 9, 14, 7]
# salary = [111, 222, 333]

# data = list(zip(users, ids, salary))
# print(data)
# ==================================================================================================

#==============================        Функция enumerate       ==========================================
# Функция enumerate() применяется к итерируемому объекту 
# и возвращает новый итератор с кортежами из индекса и элементов входных данных.

# enumerate(['Казань', 'Смоленск', 'Рыбки', 'Чикаго'])
#                           ↓
# [(0, 'Казань'), (1, 'Смоленск'), (2, 'Рыбки'), (3, 'Чикаго')]
# Нельзя пройтись дважды

# позволяет на вход передать ей набор данных, а на выходе кортежи с пронумерованными элементами

# users = ['user1', 'user2', 'user3', 'user4', 'user5']
# ids = [4, 5, 9, 14, 7]
# salary = [111, 222, 333]

# data = list(enumerate(users))
# print(data)
